### 12. Terraform Functions and Conditional Expressions

#### More Terraform Functions

**Overview:**
- Terraform provides a wide array of built-in functions to manipulate and transform data.
- Functions can be categorized into types such as string, numeric, collection, date/time, encoding, file, network, and type conversion functions.

**Commonly Used Functions:**

1. **String Functions:**
   - `upper(string)`: Converts all characters in the string to uppercase.
   - `lower(string)`: Converts all characters in the string to lowercase.
   - `length(string)`: Returns the length of the string.

   **Example:**
   ```hcl
   variable "example_string" {
     default = "Hello World"
   }

   output "uppercase_string" {
     value = upper(var.example_string)
   }

   output "string_length" {
     value = length(var.example_string)
   }
   ```

2. **Numeric Functions:**
   - `max(number1, number2, ...)`: Returns the largest number.
   - `min(number1, number2, ...)`: Returns the smallest number.
   - `abs(number)`: Returns the absolute value of the number.

   **Example:**
   ```hcl
   variable "num1" {
     default = -10
   }

   variable "num2" {
     default = 20
   }

   output "max_value" {
     value = max(var.num1, var.num2)
   }

   output "abs_value" {
     value = abs(var.num1)
   }
   ```

3. **Collection Functions:**
   - `length(list)`: Returns the number of elements in the list.
   - `merge(map1, map2, ...)`: Merges multiple maps into one.

   **Example:**
   ```hcl
   variable "example_list" {
     default = ["one", "two", "three"]
   }

   variable "example_map1" {
     default = {
       a = 1
       b = 2
     }
   }

   variable "example_map2" {
     default = {
       c = 3
       d = 4
     }
   }

   output "list_length" {
     value = length(var.example_list)
   }

   output "merged_map" {
     value = merge(var.example_map1, var.example_map2)
   }
   ```

4. **Date/Time Functions:**
   - `formatdate(format, timestamp)`: Formats a timestamp according to the specified format.
   - `timeadd(timestamp, duration)`: Adds a duration to a timestamp.

   **Example:**
   ```hcl
   output "current_date" {
     value = formatdate("YYYY-MM-DD", timestamp())
   }

   output "future_date" {
     value = timeadd(timestamp(), "72h")
   }
   ```

5. **Type Conversion Functions:**
   - `tostring(value)`: Converts the value to a string.
   - `tolist(value)`: Converts the value to a list.

   **Example:**
   ```hcl
   variable "example_number" {
     default = 123
   }

   variable "example_string" {
     default = "456"
   }

   output "number_to_string" {
     value = tostring(var.example_number)
   }

   output "string_to_number" {
     value = tonumber(var.example_string)
   }
   ```

#### Conditional Expressions

**Overview:**
- Conditional expressions allow for the selection of values based on conditions.
- They are written using the syntax: `condition ? true_value : false_value`.

**Example:**

**File: `main.tf`**
```hcl
variable "environment" {
  description = "The environment to deploy"
  default     = "dev"
}

output "instance_type" {
  value = var.environment == "prod" ? "m4.large" : "t2.micro"
}

variable "count_threshold" {
  description = "Threshold for scaling"
  default     = 5
}

variable "instance_count" {
  description = "Number of instances"
  default     = 3
}

output "should_scale" {
  value = var.instance_count > var.count_threshold ? "yes" : "no"
}
```

**Steps to Execute:**
1. **Initialize the Configuration:**
   ```sh
   terraform init
   ```

2. **Apply the Configuration:**
   ```sh
   terraform apply -auto-approve
   ```

3. **Verify the Output:**
   - The output will display the instance type and whether scaling should occur based on the conditions.

#### CodeSamples: Functions and Conditional Expressions

**Combining Functions and Conditional Expressions:**

**File: `main.tf`**
```hcl
variable "list" {
  default = ["apple", "banana", "cherry"]
}

variable "search_item" {
  default = "banana"
}

output "item_index" {
  value = index(var.list, var.search_item)
}

output "item_exists" {
  value = contains(var.list, var.search_item) ? "Item found" : "Item not found"
}
```

**Steps to Execute:**
1. **Initialize the Configuration:**
   ```sh
   terraform init
   ```

2. **Apply the Configuration:**
   ```sh
   terraform apply -auto-approve
   ```

3. **Verify the Output:**
   - The output will display the index of the search item in the list and whether the item was found.

#### Terraform Workspaces

**Overview:**
- Workspaces allow for the management of multiple environments (e.g., dev, staging, prod) using a single configuration.
- Each workspace has its own state, so changes in one workspace do not affect others.

**Common Commands:**
- `terraform workspace list`: Lists all existing workspaces.
- `terraform workspace new <name>`: Creates a new workspace.
- `terraform workspace select <name>`: Switches to the specified workspace.
- `terraform workspace delete <name>`: Deletes the specified workspace.

**Example:**

**Creating and Using Workspaces:**

**File: `main.tf`**
```hcl
provider "aws" {
  region = "us-east-1"
}

resource "aws_s3_bucket" "example" {
  bucket = "my-bucket-${terraform.workspace}"
  acl    = "private"
}

output "bucket_name" {
  value = aws_s3_bucket.example.bucket
}
```

**Steps to Execute:**
1. **Initialize the Configuration:**
   ```sh
   terraform init
   ```

2. **Create and Switch to a New Workspace:**
   ```sh
   terraform workspace new dev
   terraform workspace select dev
   ```

3. **Apply the Configuration in the Dev Workspace:**
   ```sh
   terraform apply -auto-approve
   ```

4. **Create and Switch to Another Workspace:**
   ```sh
   terraform workspace new prod
   terraform workspace select prod
   ```

5. **Apply the Configuration in the Prod Workspace:**
   ```sh
   terraform apply -auto-approve
   ```

6. **Verify the Output:**
   - Each workspace will have its own S3 bucket with a name that includes the workspace name (e.g., `my-bucket-dev` and `my-bucket-prod`).

#### CodeSamples: Terraform Workspaces

**Managing Multiple Environments with Workspaces:**

**File: `main.tf`**
```hcl
provider "aws" {
  region = "us-east-1"
}

variable "instance_type" {
  default = "t2.micro"
}

resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = var.instance_type

  tags = {
    Name = "Example Instance"
    Env  = terraform.workspace
  }
}

output "instance_id" {
  value = aws_instance.example.id
}
```

**Steps to Execute:**
1. **Initialize the Configuration:**
   ```sh
   terraform init
   ```

2. **Create and Switch to a New Workspace:**
   ```sh
   terraform workspace new dev
   terraform workspace select dev
   ```

3. **Apply the Configuration in the Dev Workspace:**
   ```sh
   terraform apply -auto-approve
   ```

4. **Create and Switch to Another Workspace:**
   ```sh
   terraform workspace new prod
   terraform workspace select prod
   ```

5. **Apply the Configuration in the Prod Workspace:**
   ```sh
   terraform apply -auto-approve
   ```

6. **Verify the Output:**
   - Each workspace will have its own EC2 instance with tags indicating the environment.

### Summary

This detailed guide covers Terraform Functions, Conditional Expressions, and Workspaces, including 
practical steps, theoretical explanations, and comprehensive code samples. Utilizing these features enhances the flexibility, maintainability, 
and scalability of your Terraform configurations. 
If you have any further questions or need additional examples, feel free to ask!
